<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on Léon&#39;s Blog</title>
        <link>https://c-leon.top/posts/</link>
        <description>Recent content in Posts on Léon&#39;s Blog</description>
        <generator>Hugo -- gohugo.io</generator>
        <copyright>备案号: &lt;a href=&#34;http://www.beian.miit.gov.cn&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;苏ICP备19068370号&lt;/a&gt;</copyright>
        <lastBuildDate>Tue, 03 Mar 2020 11:43:01 +0800</lastBuildDate>
        <atom:link href="https://c-leon.top/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>构建自己的博客</title>
            <link>https://c-leon.top/posts/2020/03/%E6%9E%84%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/</link>
            <pubDate>Tue, 03 Mar 2020 11:43:01 +0800</pubDate>
            
            <guid>https://c-leon.top/posts/2020/03/%E6%9E%84%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/</guid>
            <description>使用 Hugo 构建博客框架 首先通过 Homebrew 安装 Hugo。 brew install hugo 使用 Hugo 初始化博客。 hugo new site my-blog 添加主题，此处以 Hello Friend NG 主题为例。 cd my-blog git init git submodule add https://github.com/rhazdon/hugo-theme-hello-friend-ng.git themes/hello-friend-ng 修改配置文件 以themes/hello-friend-ng/exampleSite/config.toml为模板修改即可。
创建新的文章。 hugo new posts/my-first-post.md 运行预览。 hugo server -D 生成静态文件 确保content/posts/下至少有一篇文章的draft属性为false，否则将导致 /posts路径为404。
创建新的 git 模块方便部署。 git submodule add https://github.com/leoncao1215/blog-static.git public 生成静态文件 hugo 使用 Nginx 部署到服务器 在服务器上 clone 静态文件的项目。 cd /usr/share/nginx git clone https://github.com/leoncao1215/blog-static.git my-blog 配置 Nginx。 创建新的 nginx 模块化配置。</description>
            <content type="html"><![CDATA[<h2 id="-hugo-">使用 Hugo 构建博客框架</h2>
<h4 id="-homebrew--hugo">首先通过 Homebrew 安装 Hugo。</h4>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">brew install hugo
</code></pre></div><h4 id="-hugo--1">使用 Hugo 初始化博客。</h4>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">hugo new site my-blog
</code></pre></div><h4 id="-hello-friend-ng-">添加主题，此处以 Hello Friend NG 主题为例。</h4>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">cd my-blog
git init
git submodule add https://github.com/rhazdon/hugo-theme-hello-friend-ng.git themes/hello-friend-ng
</code></pre></div><h4 id="heading">修改配置文件</h4>
<p>以<code>themes/hello-friend-ng/exampleSite/config.toml</code>为模板修改即可。</p>
<h4 id="heading-1">创建新的文章。</h4>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">hugo new posts/my-first-post.md
</code></pre></div><h4 id="heading-2">运行预览。</h4>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">hugo server -D
</code></pre></div><h2 id="heading-3">生成静态文件</h2>
<p>确保<code>content/posts/</code>下至少有一篇文章的<code>draft</code>属性为false，否则将导致 <code>/posts</code>路径为<code>404</code>。</p>
<h4 id="-git-">创建新的 git 模块方便部署。</h4>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">git submodule add https://github.com/leoncao1215/blog-static.git public
</code></pre></div><h4 id="heading-4">生成静态文件</h4>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">hugo
</code></pre></div><h2 id="-nginx-">使用 Nginx 部署到服务器</h2>
<h4 id="-clone-">在服务器上 clone 静态文件的项目。</h4>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">cd /usr/share/nginx
git clone https://github.com/leoncao1215/blog-static.git my-blog
</code></pre></div><h4 id="-nginx">配置 Nginx。</h4>
<p>创建新的 nginx 模块化配置。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">cd /etc/nginx/conf.d
vim blog.conf
</code></pre></div><p>在 blog.conf 中添加如下配置。若不用 HTTPS，将 443 端口的配置信息除 ssl 相关配置外全部放 80 端口的配置下即可。</p>
<pre><code>server {
	listen 443 ssl;
	server_name c-leon.top www.c-leon.top;
	access_log /var/log/nginx/blog.log;
	root /usr/share/nginx/my-blog/;

	ssl_certificate cert/3237001_c-leon.top.pem;
        ssl_certificate_key cert/3237001_c-leon.top.key;
        ssl_session_cache shared:SSL:1m;
        ssl_session_timeout  10m;
        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;
	ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
        ssl_prefer_server_ciphers on;

        location / {
        }

        error_page 404 /404.html;
            location = /40x.html {
        }

        error_page 500 502 503 504 /50x.html;
            location = /50x.html {
        }
}
server {
	listen 80;
	server_name c-leon.top www.c-leon.top;
	return 301 https://c-leon.top$request_uri;
}

</code></pre>]]></content>
        </item>
        
    </channel>
</rss>
